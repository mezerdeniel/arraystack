/*
 * Project and Training 2 - HS23, Computer Science, Berner Fachhochschule
 */

// You are not allowed to change this file.

package ch.bfh.stack;

import ch.bfh.exceptions.StackEmptyException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class PrintlnTest {

	private final ByteArrayOutputStream outStream = new ByteArrayOutputStream();
	private final ByteArrayOutputStream errStream = new ByteArrayOutputStream();
	private final PrintStream originalOutStream = System.out;
	private final PrintStream originalErrStream = System.err;

	@BeforeEach
	public void setUpStreams() {
		System.setOut(new PrintStream(outStream));
		System.setErr(new PrintStream(errStream));
	}

	@AfterEach
	public void restoreStreams() {
		System.setOut(originalOutStream);
		System.setErr(originalErrStream);
	}

	@Test
	public void isEmpty() {
		Stack<Integer> stack = new ArrayBasedStack<>();
		stack.isEmpty();
		assertEquals("", outStream.toString(), "Method isEmpty() should not generate any output on stdout");
		assertEquals("", errStream.toString(), "Method isEmpty() should not generate any output on stderr");
	}

	@Test
	public void testSize() {
		Stack<Integer> stack = new ArrayBasedStack<>();
		stack.size();
		assertEquals("", outStream.toString(), "Method size() should not generate any output on stdout");
		assertEquals("", errStream.toString(), "Method size() should not generate any output on stderr");
	}

	@Test
	public void testClear() {
		Stack<Integer> stack = new ArrayBasedStack<>();
		stack.clear();
		assertEquals("", outStream.toString(), "Method clear() should not generate any output on stdout");
		assertEquals("", errStream.toString(), "Method clear() should not generate any output on stderr");
	}

	@Test
	public void testContains() {
		Stack<Integer> stack = new ArrayBasedStack<>();
		stack.contains(123);
		assertEquals("", outStream.toString(), "Method contains() should not generate any output on stdout");
		assertEquals("", errStream.toString(), "Method contains() should not generate any output on stderr");
	}

	@Test
	public void testContains2() {
		Stack<Integer> stack = new ArrayBasedStack<>();
		stack.push(123);
		stack.contains(123);
		assertEquals("", outStream.toString(), "Method contains() should not generate any output on stdout");
		assertEquals("", errStream.toString(), "Method contains() should not generate any output on stderr");
	}

	@Test
	public void testPush() {
		Stack<Integer> stack = new ArrayBasedStack<>();
		stack.push(123);
		assertEquals("", outStream.toString(), "Method push(e) should not generate any output on stdout");
		assertEquals("", errStream.toString(), "Method push(e) should not generate any output on stderr");
	}

	@Test
	public void testPop() {
		Stack<Integer> stack = new ArrayBasedStack<>();
		stack.push(123);
		stack.pop();
		assertEquals("", outStream.toString(), "Method pop() on a non-empty stack should not generate any output on stdout");
		assertEquals("", errStream.toString(), "Method pop() on a non-empty stack should not generate any output on stderr");
	}

	@Test
	public void testPop2() {
		Stack<Integer> stack = new ArrayBasedStack<>();
		assertThrows(StackEmptyException.class, stack::pop);
		assertEquals("", outStream.toString(), "Method pop() on an empty stack should not generate any output on stdout");
		// Output on stderr might be generated by the exception
	}

	@Test
	public void testTop() {
		Stack<Integer> stack = new ArrayBasedStack<>();
		stack.push(123);
		stack.top();
		assertEquals("", outStream.toString(), "Method top() on a non-empty stack should not generate any output on stdout");
		assertEquals("", errStream.toString(), "Method top() on a non-empty stack should not generate any output on stderr");
	}

	@Test
	public void testTop2() {
		Stack<Integer> stack = new ArrayBasedStack<>();
		assertThrows(StackEmptyException.class, stack::top);
		assertEquals("", outStream.toString(), "Method top() on an stack  should not generate any output on stdout");
		// Output on stderr might be generated by the exception
	}

}
